{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-9300a589f9d3fb3b004015ad97e90e52",
            "file": "src/app/state/app-state.ts",
            "type": "interface",
            "sourceCode": "import { BookState } from '../components/state/book.reducer';\r\n\r\nexport interface AppState {\r\n    data: BookState\r\n}",
            "properties": [
                {
                    "name": "data",
                    "type": "BookState",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-96e65d758d5f640f5f9cb79c7b500be0-1",
            "file": "src/app/components/state/book.reducer.ts",
            "type": "interface",
            "sourceCode": "import * as fromRoot from '../../state/app-state';\r\nimport { Book } from '../../interfaces/book';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from \"@ngrx/entity\";\r\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\r\nimport * as bookActions from \"./book.actions\";\r\n\r\nexport interface AppState extends fromRoot.AppState {\r\n    books: BookState;\r\n  }\r\n\r\n  export interface BookState extends EntityState<Book> {\r\n    selectedBookId: number | null;\r\n    loading: boolean;\r\n    loaded: boolean;\r\n    error: string;\r\n  }\r\n\r\n  export const bookAdapter: EntityAdapter<Book> = createEntityAdapter<Book>();\r\n\r\n  export const defaultBook: BookState = {\r\n    ids: [],\r\n    entities: {},\r\n    selectedBookId: null,\r\n    loading: false,\r\n    loaded: false,\r\n    error: \"\"\r\n  };\r\n\r\n  export const initialState = bookAdapter.getInitialState(defaultBook);\r\n\r\n  export function bookReducer(\r\n    state = initialState,\r\n    action: bookActions.BookAction\r\n  ): BookState {\r\n    switch (action.type) {\r\n      case bookActions.BookActionTypes.LOAD_BOOKS_SUCCESS: {\r\n        return bookAdapter.addAll(action.payload, {\r\n          ...state,\r\n          loading: false,\r\n          loaded: true\r\n        });\r\n      }\r\n      case bookActions.BookActionTypes.LOAD_BOOKS_FAIL: {\r\n        return {\r\n          ...state,\r\n          entities: {},\r\n          loading: false,\r\n          loaded: false,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      case bookActions.BookActionTypes.CREATE_BOOK_SUCCESS: {\r\n        return bookAdapter.addOne(action.payload, state);\r\n      }\r\n      case bookActions.BookActionTypes.CREATE_BOOK_FAIL: {\r\n        return {\r\n          ...state,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      case bookActions.BookActionTypes.UPDATE_BOOK_SUCCESS: {\r\n        return bookAdapter.updateOne(action.payload, state);\r\n      }\r\n      case bookActions.BookActionTypes.UPDATE_BOOK_FAIL: {\r\n        return {\r\n          ...state,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      case bookActions.BookActionTypes.DELETE_BOOK_SUCCESS: {\r\n        return bookAdapter.removeOne(action.payload, state);\r\n      }\r\n      case bookActions.BookActionTypes.DELETE_BOOK_FAIL: {\r\n        return {\r\n          ...state,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n\r\n  const getBookFeatureState = createFeatureSelector<BookState>(\r\n    \"books\"\r\n  );\r\n\r\n  export const getBooks = createSelector(\r\n    getBookFeatureState,\r\n    bookAdapter.getSelectors().selectAll\r\n  );\r\n  \r\n  export const getBooksLoading = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loading\r\n  );\r\n  \r\n  export const getBooksLoaded = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loaded\r\n  );\r\n  \r\n  export const getError = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.error\r\n  );\r\n  \r\n  export const getCurrentBookId = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.selectedBookId\r\n  );\r\n  export const getCurrentBook = createSelector(\r\n    getBookFeatureState,\r\n    getCurrentBookId,\r\n    state => state.entities[state.selectedBookId]\r\n  );",
            "properties": [
                {
                    "name": "books",
                    "type": "BookState",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppState-1"
        },
        {
            "name": "Book",
            "id": "interface-Book-c5d443ada47ac84c3f5aab0aeae26b4e",
            "file": "src/app/interfaces/book.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\r\n    id?: number;\r\n    title?: string;\r\n    category?: string;\r\n    description?: string;\r\n}",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BookState",
            "id": "interface-BookState-96e65d758d5f640f5f9cb79c7b500be0",
            "file": "src/app/components/state/book.reducer.ts",
            "type": "interface",
            "sourceCode": "import * as fromRoot from '../../state/app-state';\r\nimport { Book } from '../../interfaces/book';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from \"@ngrx/entity\";\r\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\r\nimport * as bookActions from \"./book.actions\";\r\n\r\nexport interface AppState extends fromRoot.AppState {\r\n    books: BookState;\r\n  }\r\n\r\n  export interface BookState extends EntityState<Book> {\r\n    selectedBookId: number | null;\r\n    loading: boolean;\r\n    loaded: boolean;\r\n    error: string;\r\n  }\r\n\r\n  export const bookAdapter: EntityAdapter<Book> = createEntityAdapter<Book>();\r\n\r\n  export const defaultBook: BookState = {\r\n    ids: [],\r\n    entities: {},\r\n    selectedBookId: null,\r\n    loading: false,\r\n    loaded: false,\r\n    error: \"\"\r\n  };\r\n\r\n  export const initialState = bookAdapter.getInitialState(defaultBook);\r\n\r\n  export function bookReducer(\r\n    state = initialState,\r\n    action: bookActions.BookAction\r\n  ): BookState {\r\n    switch (action.type) {\r\n      case bookActions.BookActionTypes.LOAD_BOOKS_SUCCESS: {\r\n        return bookAdapter.addAll(action.payload, {\r\n          ...state,\r\n          loading: false,\r\n          loaded: true\r\n        });\r\n      }\r\n      case bookActions.BookActionTypes.LOAD_BOOKS_FAIL: {\r\n        return {\r\n          ...state,\r\n          entities: {},\r\n          loading: false,\r\n          loaded: false,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      case bookActions.BookActionTypes.CREATE_BOOK_SUCCESS: {\r\n        return bookAdapter.addOne(action.payload, state);\r\n      }\r\n      case bookActions.BookActionTypes.CREATE_BOOK_FAIL: {\r\n        return {\r\n          ...state,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      case bookActions.BookActionTypes.UPDATE_BOOK_SUCCESS: {\r\n        return bookAdapter.updateOne(action.payload, state);\r\n      }\r\n      case bookActions.BookActionTypes.UPDATE_BOOK_FAIL: {\r\n        return {\r\n          ...state,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      case bookActions.BookActionTypes.DELETE_BOOK_SUCCESS: {\r\n        return bookAdapter.removeOne(action.payload, state);\r\n      }\r\n      case bookActions.BookActionTypes.DELETE_BOOK_FAIL: {\r\n        return {\r\n          ...state,\r\n          error: action.payload\r\n        };\r\n      }\r\n  \r\n      default: {\r\n        return state;\r\n      }\r\n    }\r\n  }\r\n\r\n  const getBookFeatureState = createFeatureSelector<BookState>(\r\n    \"books\"\r\n  );\r\n\r\n  export const getBooks = createSelector(\r\n    getBookFeatureState,\r\n    bookAdapter.getSelectors().selectAll\r\n  );\r\n  \r\n  export const getBooksLoading = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loading\r\n  );\r\n  \r\n  export const getBooksLoaded = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loaded\r\n  );\r\n  \r\n  export const getError = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.error\r\n  );\r\n  \r\n  export const getCurrentBookId = createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.selectedBookId\r\n  );\r\n  export const getCurrentBook = createSelector(\r\n    getBookFeatureState,\r\n    getCurrentBookId,\r\n    state => state.entities[state.selectedBookId]\r\n  );",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loaded",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedBookId",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "RouterStateUrl",
            "id": "interface-RouterStateUrl-b355d5363ee6de61ed6f031a3fc3ed27",
            "file": "src/app/state/utils.ts",
            "type": "interface",
            "sourceCode": "import { StoreModule, ActionReducerMap } from \"@ngrx/store\";\r\nimport { Params, RouterStateSnapshot } from \"@angular/router\";\r\nimport {\r\n  StoreRouterConnectingModule,\r\n  routerReducer,\r\n  RouterReducerState,\r\n  RouterStateSerializer\r\n} from \"@ngrx/router-store\";\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  params: Params;\r\n  queryParams: Params;\r\n}\r\n\r\nexport interface State {\r\n  router: RouterReducerState<RouterStateUrl>;\r\n}\r\n\r\nexport class CustomSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    let route = routerState.root;\r\n\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n\r\n    const {\r\n      url,\r\n      root: { queryParams }\r\n    } = routerState;\r\n    const { params } = route;\r\n\r\n    // Only return an object including the URL, params and query params\r\n    // instead of the entire snapshot\r\n    return { url, params, queryParams };\r\n  }\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  router: routerReducer\r\n};\r\n",
            "properties": [
                {
                    "name": "params",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "queryParams",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-b355d5363ee6de61ed6f031a3fc3ed27",
            "file": "src/app/state/utils.ts",
            "type": "interface",
            "sourceCode": "import { StoreModule, ActionReducerMap } from \"@ngrx/store\";\r\nimport { Params, RouterStateSnapshot } from \"@angular/router\";\r\nimport {\r\n  StoreRouterConnectingModule,\r\n  routerReducer,\r\n  RouterReducerState,\r\n  RouterStateSerializer\r\n} from \"@ngrx/router-store\";\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  params: Params;\r\n  queryParams: Params;\r\n}\r\n\r\nexport interface State {\r\n  router: RouterReducerState<RouterStateUrl>;\r\n}\r\n\r\nexport class CustomSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    let route = routerState.root;\r\n\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n\r\n    const {\r\n      url,\r\n      root: { queryParams }\r\n    } = routerState;\r\n    const { params } = route;\r\n\r\n    // Only return an object including the URL, params and query params\r\n    // instead of the entire snapshot\r\n    return { url, params, queryParams };\r\n  }\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  router: routerReducer\r\n};\r\n",
            "properties": [
                {
                    "name": "router",
                    "type": "RouterReducerState<RouterStateUrl>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-dafaa37a97bc7dba37e85016633ac713",
            "file": "src/app/interfaces/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    username?: string;\r\n    password?: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    email?: string;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BookEffect",
            "id": "injectable-BookEffect-a7b807adba629ec271acd7acfd6ebd3d",
            "file": "src/app/components/state/book.effect.ts",
            "properties": [
                {
                    "name": "createBook$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<bookActions.CreateBook>(\r\n            bookActions.BookActionTypes.CREATE_BOOK\r\n        ),\r\n        map((action: bookActions.CreateBook) => action.payload),\r\n        mergeMap((book: Book) =>\r\n          this.bookService.addBook(book).pipe(\r\n            map(\r\n              (newBook: any) =>\r\n                new bookActions.CreateBookSuccess(newBook)\r\n            ),\r\n            catchError(err => of(new bookActions.CreateBookFail(err)))\r\n          )\r\n        )\r\n      )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteBook$",
                    "defaultValue": "this.actions$.pipe(\r\n      ofType<bookActions.DeleteBook>(\r\n        bookActions.BookActionTypes.DELETE_BOOK\r\n     ),\r\n     map((action: bookActions.DeleteBook) => action.payload),\r\n     mergeMap((id: number) =>\r\n      this.bookService.deleteBook(id).pipe(\r\n        map(() => new bookActions.DeleteBookSuccess(id)),\r\n        catchError(err => of(new bookActions.DeleteBookFail(err)))\r\n      )\r\n    )\r\n  )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadBooks$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<bookActions.LoadBooks>(\r\n            bookActions.BookActionTypes.LOAD_BOOKS\r\n        ),\r\n        mergeMap((action: bookActions.LoadBooks) =>\r\n          this.bookService.getAllBooks().pipe(\r\n            map(\r\n              (books: Book[]) =>\r\n                new bookActions.LoadBooksSuccess(books)\r\n            ),\r\n            catchError(err => of(new bookActions.LoadBooksFail(err)))\r\n          )\r\n        )\r\n      )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updateBook$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<bookActions.UpdateBook>(\r\n          bookActions.BookActionTypes.UPDATE_BOOK\r\n        ),\r\n        map((action: bookActions.UpdateBook) => action.payload),\r\n        mergeMap((book: Book) =>\r\n          this.bookService.updateBook(book).pipe(\r\n            map(\r\n              (updateBook: Book) =>\r\n                new bookActions.UpdateBookSuccess({\r\n                  id: updateBook.id,\r\n                  changes: updateBook\r\n                })\r\n            ),\r\n            catchError(err => of(new bookActions.UpdateBookFail(err)))\r\n          )\r\n        )\r\n      )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { BookService } from '../../services/book.service';\r\nimport { Observable, of } from \"rxjs\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport * as bookActions from '../state/book.actions';\r\nimport { mergeMap, map, catchError } from \"rxjs/operators\";\r\nimport { Book } from \"../../interfaces/book\";\r\n\r\n@Injectable()\r\nexport class BookEffect {\r\n\r\n    constructor(\r\n        private actions$: Actions,\r\n        private bookService: BookService\r\n      ) {}\r\n\r\n      @Effect()\r\n      loadBooks$: Observable<Action> = this.actions$.pipe(\r\n        ofType<bookActions.LoadBooks>(\r\n            bookActions.BookActionTypes.LOAD_BOOKS\r\n        ),\r\n        mergeMap((action: bookActions.LoadBooks) =>\r\n          this.bookService.getAllBooks().pipe(\r\n            map(\r\n              (books: Book[]) =>\r\n                new bookActions.LoadBooksSuccess(books)\r\n            ),\r\n            catchError(err => of(new bookActions.LoadBooksFail(err)))\r\n          )\r\n        )\r\n      );\r\n\r\n      @Effect()\r\n      createBook$: Observable<Action> = this.actions$.pipe(\r\n        ofType<bookActions.CreateBook>(\r\n            bookActions.BookActionTypes.CREATE_BOOK\r\n        ),\r\n        map((action: bookActions.CreateBook) => action.payload),\r\n        mergeMap((book: Book) =>\r\n          this.bookService.addBook(book).pipe(\r\n            map(\r\n              (newBook: any) =>\r\n                new bookActions.CreateBookSuccess(newBook)\r\n            ),\r\n            catchError(err => of(new bookActions.CreateBookFail(err)))\r\n          )\r\n        )\r\n      );\r\n\r\n      @Effect()\r\n      updateBook$: Observable<Action> = this.actions$.pipe(\r\n        ofType<bookActions.UpdateBook>(\r\n          bookActions.BookActionTypes.UPDATE_BOOK\r\n        ),\r\n        map((action: bookActions.UpdateBook) => action.payload),\r\n        mergeMap((book: Book) =>\r\n          this.bookService.updateBook(book).pipe(\r\n            map(\r\n              (updateBook: Book) =>\r\n                new bookActions.UpdateBookSuccess({\r\n                  id: updateBook.id,\r\n                  changes: updateBook\r\n                })\r\n            ),\r\n            catchError(err => of(new bookActions.UpdateBookFail(err)))\r\n          )\r\n        )\r\n      );\r\n\r\n      @Effect()\r\n      deleteBook$: Observable<Action> = this.actions$.pipe(\r\n      ofType<bookActions.DeleteBook>(\r\n        bookActions.BookActionTypes.DELETE_BOOK\r\n     ),\r\n     map((action: bookActions.DeleteBook) => action.payload),\r\n     mergeMap((id: number) =>\r\n      this.bookService.deleteBook(id).pipe(\r\n        map(() => new bookActions.DeleteBookSuccess(id)),\r\n        catchError(err => of(new bookActions.DeleteBookFail(err)))\r\n      )\r\n    )\r\n  );\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "bookService",
                        "type": "BookService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookService",
                        "type": "BookService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BookService",
            "id": "injectable-BookService-1fcd269af6af6dc597ec6da660a33be3",
            "file": "src/app/services/book.service.ts",
            "properties": [
                {
                    "name": "endPoint",
                    "defaultValue": "environment.apiEndpoint",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "addBook",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book[]>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Book[]>",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "updateBook",
                    "args": [
                        {
                            "name": "book",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { Book } from '../interfaces/book'\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n\n  private endPoint = environment.apiEndpoint;\n\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) {\n  }\n\n\n  getAllBooks(): Observable<Book[]> {\n\n    return this.http.get(`${this.endPoint}/books`)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return res;\n          } else {\n            return null;\n          }\n        })\n      );\n\n  }\n\n  addBook(book: Book): Observable<Book[]> {\n    return this.http.post(`${this.endPoint}/books`, book, this.httpOptions)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return res;\n          } else {\n            return null;\n          }\n        })\n      );\n  }\n\n  updateBook(book): Observable<Book> {\n    return this.http.put<Book>(`${this.endPoint}/books/${book.id}`,\n      book)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return res;\n          } else {\n            return null;\n          }\n        })\n      )\n  }\n\n  deleteBook(id) {\n    return this.http.delete(`${this.endPoint}/books/${id}`, this.httpOptions)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return true\n          } else {\n            return false;\n          }\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DatashareService",
            "id": "injectable-DatashareService-58220a242d71bc9e7421d301fb95975d",
            "file": "src/app/services/datashare.service.ts",
            "properties": [
                {
                    "name": "comicBooks",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "cookBooks",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "dataShareSubject",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "historyBooks",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "horrorBooks",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "otherBooks",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "scienceBooks",
                    "defaultValue": "[]",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "userInfo",
                    "defaultValue": "null",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../interfaces/user';\nimport { Book } from '../interfaces/book';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatashareService {\n\n  private dataShareSubject = new BehaviorSubject(null);\n  public userInfo: User = null;\n  historyBooks: Book[] = [];\n  horrorBooks: Book[] = [];\n  cookBooks: Book[] = [];\n  comicBooks: Book[] = [];\n  scienceBooks: Book[] = [];\n  otherBooks: Book[] = []; \n\n  constructor() { }\n\n  public unsubscribe() {\n    this.dataShareSubject = new BehaviorSubject(null);\n  }\n\n  public setData(data) {\n   this.dataShareSubject.next(data);\n  }\n\n  public getData() {\n    return this.dataShareSubject.asObservable();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-66d08877c1ede50df0bdb0f0158c5fc8",
            "file": "src/app/services/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "toggleLight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport const darkTheme = {\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n};\n\nexport const lightTheme = {\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n\n  constructor() { }\n\n  toggleDark() {\n    this.setTheme(darkTheme);\n  }\n\n  toggleLight() {\n    this.setTheme(lightTheme);\n  }\n\n  private setTheme(theme: {}) {\n    Object.keys(theme).forEach(k =>\n      document.documentElement.style.setProperty(`--${k}`, theme[k])\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-d144dd18a2af14c9970805e417153cba",
            "file": "src/app/services/user.service.ts",
            "properties": [
                {
                    "name": "endPoint",
                    "defaultValue": "environment.apiEndpoint",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../interfaces/user';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private endPoint = environment.apiEndpoint;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get(`${this.endPoint}/users`)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return res;\n          } else {\n            return null;\n          }\n        })\n      );\n  }\n\n  addUser(user: User): Observable<User[]> {\n    return this.http.post(`${this.endPoint}/users`, user, this.httpOptions)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return res;\n          } else {\n            return null;\n          }\n        })\n      )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateBook",
            "id": "class-CreateBook-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.CREATE_BOOK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CreateBookFail",
            "id": "class-CreateBookFail-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.CREATE_BOOK_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CreateBookSuccess",
            "id": "class-CreateBookSuccess-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book"
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.CREATE_BOOK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CustomSerializer",
            "id": "class-CustomSerializer-b355d5363ee6de61ed6f031a3fc3ed27",
            "file": "src/app/state/utils.ts",
            "type": "class",
            "sourceCode": "import { StoreModule, ActionReducerMap } from \"@ngrx/store\";\r\nimport { Params, RouterStateSnapshot } from \"@angular/router\";\r\nimport {\r\n  StoreRouterConnectingModule,\r\n  routerReducer,\r\n  RouterReducerState,\r\n  RouterStateSerializer\r\n} from \"@ngrx/router-store\";\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  params: Params;\r\n  queryParams: Params;\r\n}\r\n\r\nexport interface State {\r\n  router: RouterReducerState<RouterStateUrl>;\r\n}\r\n\r\nexport class CustomSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    let route = routerState.root;\r\n\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n\r\n    const {\r\n      url,\r\n      root: { queryParams }\r\n    } = routerState;\r\n    const { params } = route;\r\n\r\n    // Only return an object including the URL, params and query params\r\n    // instead of the entire snapshot\r\n    return { url, params, queryParams };\r\n  }\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  router: routerReducer\r\n};\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "RouterStateUrl",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RouterStateSerializer"
            ]
        },
        {
            "name": "DeleteBook",
            "id": "class-DeleteBook-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.DELETE_BOOK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteBookFail",
            "id": "class-DeleteBookFail-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.DELETE_BOOK_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteBookSuccess",
            "id": "class-DeleteBookSuccess-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.DELETE_BOOK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadBooks",
            "id": "class-LoadBooks-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.LOAD_BOOKS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadBooksFail",
            "id": "class-LoadBooksFail-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.LOAD_BOOKS_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadBooksSuccess",
            "id": "class-LoadBooksSuccess-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book[]"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.LOAD_BOOKS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateBook",
            "id": "class-UpdateBook-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.UPDATE_BOOK",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateBookFail",
            "id": "class-UpdateBookFail-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.UPDATE_BOOK_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateBookSuccess",
            "id": "class-UpdateBookSuccess-adcc6c74771327042b49519d157b6e5c",
            "file": "src/app/components/state/book.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Book } from 'src/app/interfaces/book';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n\r\nexport enum BookActionTypes {\r\n    LOAD_BOOKS = \"[Book] Load Books\",\r\n    LOAD_BOOKS_SUCCESS = \"[Book] Load Books Success\",\r\n    LOAD_BOOKS_FAIL = \"[Book] Load Books Fail\",\r\n    CREATE_BOOK = \"[Book] Create Book\",\r\n    CREATE_BOOK_SUCCESS = \"[Book] Create Book Success\",\r\n    CREATE_BOOK_FAIL = \"[Book] Create Book Fail\",\r\n    UPDATE_BOOK = \"[Book] Update Book\",\r\n    UPDATE_BOOK_SUCCESS = \"[Book] Update Book Success\",\r\n    UPDATE_BOOK_FAIL = \"[Book] Update Book Fail\",\r\n    DELETE_BOOK = \"[Book] Delete Book\",\r\n    DELETE_BOOK_SUCCESS = \"[Book] Delete Book Success\",\r\n    DELETE_BOOK_FAIL = \"[Book] Delete Book Fail\"\r\n  }\r\n\r\n  export class LoadBooks implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS;\r\n  }\r\n  \r\n  export class LoadBooksSuccess implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_SUCCESS;\r\n  \r\n    constructor(public payload: Book[]) {}\r\n  }\r\n  \r\n  export class LoadBooksFail implements Action {\r\n    readonly type = BookActionTypes.LOAD_BOOKS_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class CreateBook implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class CreateBookFail implements Action {\r\n    readonly type = BookActionTypes.CREATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class UpdateBook implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK;\r\n  \r\n    constructor(public payload: Book) {}\r\n  }\r\n  \r\n  export class UpdateBookSuccess implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: Update<Book>) {}\r\n  }\r\n  \r\n  export class UpdateBookFail implements Action {\r\n    readonly type = BookActionTypes.UPDATE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n  export class DeleteBook implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookSuccess implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_SUCCESS;\r\n  \r\n    constructor(public payload: number) {}\r\n  }\r\n  \r\n  export class DeleteBookFail implements Action {\r\n    readonly type = BookActionTypes.DELETE_BOOK_FAIL;\r\n  \r\n    constructor(public payload: string) {}\r\n  }\r\n\r\n\r\n  export type BookAction =\r\n  | LoadBooks\r\n  | LoadBooksSuccess\r\n  | LoadBooksFail\r\n  | CreateBook\r\n  | CreateBookSuccess\r\n  | CreateBookFail\r\n  | UpdateBook\r\n  | UpdateBookSuccess\r\n  | UpdateBookFail\r\n  | DeleteBook\r\n  | DeleteBookSuccess\r\n  | DeleteBookFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Update<Book>"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Update<Book>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Update<Book>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "BookActionTypes.UPDATE_BOOK_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionComponent",
            "id": "component-ActionComponent-8ff6cd4ee843734720de5f628ca52bd0",
            "file": "src/app/components/action/action.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action",
            "styleUrls": [
                "./action.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, HostListener } from '@angular/core';\nimport { Location } from \"@angular/common\";\nimport { DatashareService } from 'src/app/services/datashare.service';\nimport { Book } from 'src/app/interfaces/book';\nimport { BookService } from 'src/app/services/book.service';\nimport { Store } from '@ngrx/store';\nimport * as fromBook from \"../state/book.reducer\";\nimport * as bookActions from \"../state/book.actions\";\n\n@Component({\n  selector: 'app-action',\n  templateUrl: './action.component.html',\n  styleUrls: ['./action.component.scss']\n})\nexport class ActionComponent implements OnInit {\n  title: string;\n  category: string;\n  description: string;\n  id: number;\n\n  constructor(\n    private location: Location,\n    private datashareService: DatashareService,\n    private store: Store<fromBook.AppState>\n  ) { }\n\n\n  ngOnInit(): void {\n    this.datashareService.getData()\n      .subscribe(res => {\n        if (res != null) {\n          this.id = res.id\n          this.title = res.title;\n          this.category = res.category;\n          this.description = res.description;\n        }\n      });\n  }\n\n  onSave() {\n    const request: Book = {\n      title: this.title,\n      category: this.category,\n      description: this.description\n    };\n\n    this.store.dispatch(new bookActions.CreateBook(request));\n    this.location.back();\n  }\n\n  edit() {\n    const request: Book = {\n      id: this.id,\n      title: this.title,\n      category: this.category,\n      description: this.description\n    };\n    this.store.dispatch(new bookActions.UpdateBook(request));\n    this.location.back();\n  }\n\n  cancel() {\n    this.location.back();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  border-radius: 2px;\r\n  background-color: var(--primary-color);\r\n  color: var(--text-color);\r\n}\r\n\r\nh2 {\r\n  margin: 14px;\r\n}\r\n\r\n.card {\r\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n    transition: 0.3s;\r\n    width: 100%;\r\n\r\n    .container {\r\n        padding: 30px 16px;\r\n\r\n        .book-details {\r\n            display: flex;\r\n            margin: 10px;\r\n\r\n            input[type=text], textarea {\r\n                width: 70%;\r\n                padding: 12px;\r\n                border: 1px solid #ccc;\r\n                border-radius: 4px;\r\n                resize: vertical;\r\n                margin-left: 60px;\r\n              }\r\n\r\n              label {\r\n                width: 140px;\r\n                padding: 12px 12px 12px 0;\r\n                display: inline-block;\r\n              }\r\n        }\r\n      }\r\n\r\n      .page-footer {\r\n        border: top;\r\n        padding: 10px 0;\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        margin-right: 90px;\r\n    \r\n        button{\r\n          font-size: 15px;\r\n          text-align: center;\r\n          text-decoration: none;\r\n          display: inline-block;\r\n          font-size: 14px;\r\n          margin: 4px 2px;\r\n          cursor: pointer; \r\n          border-radius: 7px;\r\n          padding: 10px;\r\n        }\r\n\r\n        .cancel {\r\n            background-color: #ffff;\r\n            border: 1px solid tomato;\r\n            color: tomato;\r\n        }\r\n\r\n        .save {\r\n            border: none;\r\n            background-color: tomato;          \r\n            color: white;\r\n        }\r\n      }\r\n}\r\n",
                    "styleUrl": "./action.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromBook.AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromBook.AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 *ngIf=\"!id\">Share Your Book</h2>\n<h2 *ngIf=\"id\">Edit Book</h2>\n<div class=\"card\">\n  <div class=\"container\">\n    <div class=\"book-details\">\n        <label>Book Name</label>\n        <input placeholder=\"Enter Book Name\" type=\"text\"  [(ngModel)]=\"title\" name = \"name\">\n    </div>\n    <div class=\"book-details\">\n        <label>Book Category</label>\n        <input placeholder=\"Enter Book Category\" type=\"text\" [(ngModel)]=\"category\" name=\"category\">\n    </div>\n    <div class=\"book-details\">\n        <label>Book Description</label>\n        <textarea placeholder=\"Enter Your Book Description\" [(ngModel)]=\"description\" style=\"height:200px\" name=\"description\"></textarea>\n    </div>\n  </div>\n\n  <div class=\"page-footer border-top\">\n    <button class=\"cancel\" (click)=\"cancel()\">Cancel</button>\n    <button *ngIf=\"!id\" type=\"submit\" class=\"save\" (click)=\"onSave()\">Save</button>\n    <button *ngIf=\"id\" type=\"submit\" class=\"save\" (click)=\"edit()\">Edit</button>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3a8644fec112693114e19ce782e25c70",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'book-share'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'book-share';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page-content {\r\n    margin-top: -15px;\r\n    padding: 20px;\r\n    min-height: 100%;\r\n    width: 100%;\r\n  }",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!--Header-->\n<app-header></app-header>\n\n<!--Page Content-->\n<div class=\"container-fluid page-content bg-white rounded\">\n    <router-outlet></router-outlet>\n</div>\n\n<!--Footer-->\n<app-footer></app-footer>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-2e539c0d2ffc13a1f5463a2fc44b5add",
            "file": "src/app/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "book",
                    "line": 12,
                    "type": "Book"
                },
                {
                    "name": "storybookColor",
                    "line": 15,
                    "type": "\"gray\" | \"blue\" | \"violet\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Book } from 'src/app/interfaces/book';\nimport { DatashareService } from 'src/app/services/datashare.service';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit {\n\n  @Input() book: Book;\n\n  @Input()\n  storybookColor: 'gray' | 'blue' | 'violet';\n\n  categories: any;\n\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  public get classes(): string[] {\n    return [`${this.storybookColor}`];\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  background-color: var(--primary-color);\r\n  color: var(--text-color);\r\n}\r\n\r\n/*.card {\r\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n    transition: 0.3s;\r\n    width: 50%;\r\n    margin-top: 10px;\r\n    display: inline-block;\r\n\r\n    .card:hover {\r\n        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n      }\r\n\r\n    .container {\r\n        padding: 28px 22px;\r\n      }\r\n  }*/\r\n\r\n  .card {\r\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n    transition: 0.3s;\r\n    width: 100%;\r\n    margin-top: 1rem;\r\n    margin-left: 15px;\r\n  }\r\n  \r\n  .card:hover {\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n  }\r\n  \r\n  .container {\r\n    padding: 10px 20px;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto;\r\n /*   img{\r\n        margin-top: 1.5rem;\r\n        @media screen and (min-width: 320px) and (max-width: 375px)  {\r\n          width: 30px;\r\n          height: 30px;\r\n        }\r\n    }*/\r\n     .btn-remove{\r\n        margin-top: 3.5rem;\r\n        cursor: pointer;\r\n    }\r\n    .btn-update{\r\n        margin-top: 3.5rem;\r\n        cursor: pointer;\r\n    }\r\n    .content{\r\n      text-align: start;\r\n      width: 375px;\r\n   /*   h2{\r\n        @media screen and (min-width: 320px) and (max-width: 375px)  {\r\n          font-size: 16px;\r\n        }\r\n      }\r\n      @media screen and (min-width: 320px) and (max-width: 375px)  {\r\n        width: 105px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }\r\n      @media screen and (min-width: 375px) and (max-width: 425px)  {\r\n        width: 105px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }\r\n      @media screen and (min-width: 425px) and (max-width: 768px)  {\r\n        width: 150px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }\r\n\r\n      @media screen and (min-width: 768px) and (max-width: 1024px)  {\r\n        width: 243px;\r\n        h2{\r\n          font-size: 16px;\r\n        }\r\n        p{\r\n          font-size: 12px;\r\n        }\r\n      }*/\r\n      h2{\r\n        word-wrap: break-word;\r\n      }\r\n      p{\r\n        word-wrap: break-word;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 280px) and (max-width: 823px) {\r\n   .card {\r\n     margin-left: 0px;\r\n   }\r\n\r\n   .container {\r\n     display: block;\r\n     margin: -10px;\r\n\r\n     .content {\r\n       width: 182px;\r\n     }\r\n   }\r\n  }\r\n\r\n  @media screen and (min-width: 768px) and (max-width: 1024px) {\r\n    .container {\r\n      display: flex;\r\n      margin: 0px;\r\n\r\n      .content {\r\n        width: 500px;\r\n        margin-left: 40px;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 26
                    }
                }
            },
            "templateData": "\n<!--<div class=\"card\">\n    <div class=\"container\" [ngStyle]=\"{ 'background-color': classes }\">\n      <span *ngIf=\"book.category === 'Cookbooks'\"> <img src=\"../../../assets/cookbook.svg\"/></span>\n      <span *ngIf=\"book.category === 'English'\"><img src=\"../../../assets/english.svg\"/></span>\n      <span *ngIf=\"book.category === 'Horror'\"><img src=\"../../../assets/horror.svg\"/></span>\n      <span *ngIf=\"book.category === 'Historical Fiction'\"> <img src=\"../../../assets/history.svg\"/></span>\n      <span *ngIf=\"book.category === 'Science'\"> <img src=\"../../../assets/universe.svg\"/></span>\n      <span *ngIf=\"book.category !== 'Cookbooks' && \n      book.category !== 'English' && \n      book.category !== 'Science' &&\n      book.category !== 'Historical Fiction' &&\n      book.category !== 'Horror'\"> <img src=\"../../../assets/other.svg\"/></span>\n      <h4><b>{{book.title}}</b></h4>\n      <h5>{{book.category}}</h5> \n    </div>\n</div>-->\n\n<div class=\"card\">\n  <div class=\"container\" [ngStyle]=\"{ 'background-color': classes }\">\n    <span *ngIf=\"book.category === 'Cookbooks'\"> <img src=\"../../../assets/cookbook.svg\"/></span>\n    <span *ngIf=\"book.category === 'English'\"><img src=\"../../../assets/english.svg\"/></span>\n    <span *ngIf=\"book.category === 'Horror'\"><img src=\"../../../assets/horror.svg\"/></span>\n    <span *ngIf=\"book.category === 'Historical Fiction'\"> <img src=\"../../../assets/history.svg\"/></span>\n    <span *ngIf=\"book.category === 'Science'\"> <img src=\"../../../assets/universe.svg\"/></span>\n    <span *ngIf=\"book.category !== 'Cookbooks' && \n    book.category !== 'English' && \n    book.category !== 'Science' &&\n    book.category !== 'Historical Fiction' &&\n    book.category !== 'Horror'\"> <img src=\"../../../assets/other.svg\"/></span>\n      <div class=\"content\">\n        <h4><b>{{book.title}}</b></h4>\n        <h5>{{book.category}}</h5>\n      </div>\n  </div>\n</div>\n\n\n\n\n\n\n \n \n \n  "
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-868f3962f21c76b835aad91a76be5501",
            "file": "src/app/components/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "footer {\r\n    padding: 10px;\r\n    margin: auto;\r\n    margin-top: 120px;\r\n    text-align: center;\r\n    color: #fff;\r\n    background: #464a54;\r\n    p {\r\n      margin: 0 auto;\r\n    }\r\n\r\n    position: -webkit-sticky; /* Safari */  \r\n    position: sticky;\r\n  }\r\n  \r\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer>\n    jgjgdj  ggk fd  fkskssk sjskskx kffk\n    <p>&copy; Book Share Application.</p>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-ec1f683d7f8d759fd2227ee0ee17a3bc-1",
            "file": "src/app/components/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isToggle",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "changeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "openDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ThemeService } from '../../../services/theme.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  isToggle: boolean = false;\n\n  constructor(\n    private themeService: ThemeService,\n    private router: Router\n    ) { }\n\n  ngOnInit(): void {\n  }\n\n  changeValue(value) {\n   if (value === 'dark') {\n     this.themeService.toggleDark();\n   } else {\n     this.themeService.toggleLight();\n   }\n  }\n\n  openDropdown() {\n    this.isToggle = !this.isToggle;\n  }\n\n  logIn() {\n    this.router.navigate(['./entry/login']);\n  }\n\n  signUp() {\n    this.router.navigate(['./entry/sign-up']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding: 4px 12px;\r\n  background-color: var(--primary-color);\r\n  color: var(--text-color);\r\n}\r\n\r\n.header {\r\n    background-color: tomato;\r\n    padding: 1px 15px;\r\n\r\n    h2 {\r\n      font-weight: 700;\r\n      i {\r\n        color: blue;\r\n      }\r\n    }\r\n\r\n    .header-right {\r\n        float: right;\r\n        margin-top: -112px;\r\n        padding: 70px;\r\n        display: flex;\r\n     \r\n     .dropdown {\r\n      position: relative;\r\n      display: inline-block;\r\n\r\n      button {\r\n        border: none;\r\n        background-color: tomato;\r\n        margin-right: 10px;\r\n      }\r\n    }\r\n\r\n    .dropdown-content {\r\n      display: none;\r\n      position: absolute;\r\n      background-color: #d1d1d1;\r\n      min-width: 160px;\r\n      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\r\n      padding: 12px 16px;\r\n      z-index: 1;\r\n    }\r\n    \r\n    .dropdown:hover .dropdown-content {\r\n      display: block;\r\n    }\r\n\r\n    .open {\r\n      display: block;\r\n    }\r\n\r\n    .entry-btn {\r\n\r\n    button {\r\n      text-align: center;\r\n      text-decoration: none;\r\n      display: inline-block;\r\n      cursor: pointer;    \r\n      font-size: 17px;\r\n      margin: 3px;\r\n      padding: 4px;\r\n      padding-left: 15px;\r\n      padding-right: 15px;\r\n      font-weight: 800;\r\n      border: 1px solid black;\r\n      background-color: rgb(243, 50, 16);\r\n      }\r\n    }\r\n\r\n    }\r\n\r\n  }\r\n\r\n    @media screen and (min-width: 280px) and (max-width: 750px)  {\r\n      .header {\r\n        height: 170px;\r\n        margin: 4px;   \r\n        \r\n        .header-right {\r\n          float: none;\r\n          margin-top: -70px;\r\n          padding: 70px;\r\n          display: flex;\r\n        }\r\n      }\r\n    }\r\n\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"header\">\n    <h2>   <img src=\"../../../assets/book.svg\"/> Book Share</h2>\n    <div class=\"header-right\">\n        <div class=\"dropdown\">\n            <button (click)=\"isToggle = !isToggle;\"><img src=\"../../../../assets/arrow.svg\"/></button>\n            <div [ngClass]=\"{'open': isToggle}\" class=\"dropdown-content\">\n                <input type=\"radio\" checked id=\"light\" value=\"light\" name=\"theme\" (change)=\"changeValue($event.target.value)\">\n                <label for=\"light\">Light</label><br>\n                <input type=\"radio\" id=\"dark\" value=\"dark\" name=\"theme\" (change)=\"changeValue($event.target.value)\">\n                <label for=\"dark\">Dark</label>\n            </div>\n        </div>\n         <div class=\"entry-btn\">\n            <button class=\"login\" (click)=\"logIn()\">Login</button>\n            <button class=\"sign-up\" (click)=\"signUp()\">Register</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-c96cbd4e09674457c64f0d77600c60cb",
            "file": "src/app/components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "book",
                    "line": 20
                },
                {
                    "name": "result",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books$",
                    "type": "Observable<Book[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "error$",
                    "type": "Observable<String>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Book } from 'src/app/interfaces/book';\nimport { User } from 'src/app/interfaces/user';\nimport { Observable } from 'rxjs';\nimport * as fromBook from \"../state/book.reducer\";\nimport { Store, select } from \"@ngrx/store\";\nimport * as bookActions from \"../state/book.actions\";\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  books$: Observable<Book[]>;\n  error$: Observable<String>;\n\n  @Input() result: boolean;\n  @Input() book;\n\n  constructor(\n    private store: Store<fromBook.AppState>\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(new bookActions.LoadBooks());\n    this.books$ = this.store.pipe(select(fromBook.getBooks));\n    this.error$ = this.store.pipe(select(fromBook.getError));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  border-radius: 2px;\r\n  background-color: var(--primary-color);\r\n  color: var(--text-color);\r\n}\r\n\r\n.container {\r\n  padding: 16px;\r\n\r\n  button:hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  .parent-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .child-container {\r\n    flex: 1 0 28%;\r\n    height: 100px;\r\n    margin: 6px;\r\n  }\r\n  \r\n\r\n  .card-container {\r\n    margin-top: 15px;\r\n\r\n  }\r\n\r\n}\r\n\r\n  @-webkit-keyframes animatezoom {\r\n    from {-webkit-transform: scale(0)} \r\n    to {-webkit-transform: scale(1)}\r\n  }\r\n    \r\n  @keyframes animatezoom {\r\n    from {transform: scale(0)} \r\n    to {transform: scale(1)}\r\n  }\r\n  \r\n  @media screen and (min-width: 280px) and (max-width: 823px) {\r\n   .container {\r\n     .child-container {\r\n       height: inherit;\r\n     }\r\n   }\r\n  }\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<fromBook.AppState>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<fromBook.AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"parent-container\">\r\n    <div class=\"child-container\" *ngFor=\"let item of ( books$ | async )\">\r\n            <div class=\"card-container\">\r\n              <app-card [book]=\"item\"></app-card>\r\n            </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-0c5e62b48b59b1ce6da1562c01f35b17",
            "file": "src/app/components/entry/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertMsg",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isInValidUser",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoggedin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "loginUser",
                    "args": [
                        {
                            "name": "formdata",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "formdata",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, HostListener } from '@angular/core';\nimport { Location } from \"@angular/common\";\nimport { UserService } from 'src/app/services/user.service';\nimport { User } from 'src/app/interfaces/user';\nimport { DatashareService } from 'src/app/services/datashare.service';\nimport { Router } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  users: User[];\n  isInValidUser: boolean;\n  alertMsg: boolean;\n  loginForm: FormGroup;\n  isLoggedin: boolean;\n\n  constructor(\n    private location: Location,\n    private userService: UserService,\n    private datashareService: DatashareService,\n    private router: Router,\n    private fb: FormBuilder\n  ) { }\n\n\n  ngOnInit(): void {\n\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n  });\n\n    this.userService.getUsers()\n    .subscribe((res: User[]) => {\n      if (res) {\n        this.users = res;\n      }\n    });\n  }\n\n  get formControl() { \n    return this.loginForm.controls; \n  }\n\n  loginUser(formdata: any) {\n    this.isLoggedin = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n   if (formdata.username != null && formdata.password != null) {\n   var validUser = this.users.find(x => x.username === formdata.username && x.password === formdata.password);\n   if (validUser!= null) {\n     this.datashareService.userInfo = validUser;\n     this.router.navigate(['../result']);\n   } else {\n    this.isInValidUser = true;\n    console.log(\"invalid username or password...please try again!!\")\n   }\n  } else {\n    this.alertMsg = true;\n    console.log(\"please enter usename\");\n  }\n  }\n\n  cancel() {\n    this.location.back();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n      background-color: var(--primary-color);\r\n      color: var(--text-color);\r\n    }\r\n    \r\n    .card {\r\n        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n        transition: 0.3s;\r\n        width: 100%;\r\n\r\n        .error {\r\n          color: red;\r\n          font-size: 15px;\r\n      }\r\n\r\n        .alert {\r\n            padding: 7px;\r\n            background-color: rgb(247, 4, 4);\r\n            color: black;\r\n\r\n            .closebtn {\r\n                margin-right: -115px;\r\n                color: black;\r\n                font-weight: bold;\r\n                float: right;\r\n                font-size: 22px;\r\n                line-height: 20px;\r\n                cursor: pointer;\r\n                transition: 0.3s;\r\n              }\r\n              \r\n              .closebtn:hover {\r\n                color: white;\r\n              }\r\n          }\r\n    \r\n        .card:hover {\r\n            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n          }\r\n    \r\n        .container {\r\n            padding: 28px 22px;\r\n          }\r\n      }\r\n    \r\n\r\nBody {  \r\n    font-family: Calibri, Helvetica, sans-serif;    \r\n  }  \r\n  button {   \r\n         background-color: tomato;   \r\n         width: 100%;  \r\n          color: #ffff;   \r\n          padding: 15px;   \r\n          margin: 10px 0px;   \r\n          border: none;   \r\n          cursor: pointer;   \r\n           }   \r\n\r\n   input[type=text], input[type=password] {   \r\n          width: 100%;   \r\n          margin: 8px 0;  \r\n          padding: 12px 20px;   \r\n          display: inline-block;   \r\n          border: 2px solid green;   \r\n          box-sizing: border-box;   \r\n      }  \r\n   button:hover {   \r\n          opacity: 0.7;   \r\n      }   \r\n    .cancelbtn {   \r\n          width: auto;   \r\n          padding: 10px 18px;  \r\n          margin: 10px 5px;  \r\n      }   \r\n          \r\n       \r\n   .container {   \r\n          padding: 25px;   \r\n          background-color: lightblue;  \r\n      }\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControl": {
                    "name": "formControl",
                    "getSignature": {
                        "name": "formControl",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            },
            "templateData": "\n     <div class=\"card\">\n        <div class=\"container\">  \n          <div class=\"alert\" *ngIf=\"isInValidUser\">\n            <span class=\"closebtn\" onclick=\"this.parentElement.style.display='none';\">&times;</span> \n            Invalid username or password.Please try again!\n          </div> \n          <b><h3> User Login </h3></b> \n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser(loginForm.value)\">\n            <label>Username : </label>   \n            <input type=\"text\" placeholder=\"Enter Username\" name=\"username\" required formControlName=\"username\">\n            <div *ngIf=\"isLoggedin && formControl.username.errors\">\n              <div class=\"error\" *ngIf=\"formControl.username.errors.required\">Username is required</div>\n            </div> \n\n            <label>Password : </label>   \n            <input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required formControlName=\"password\"> \n            <div *ngIf=\"isLoggedin && formControl.password.errors\">\n              <div class=\"error\" *ngIf=\"formControl.password.errors.required\">Password is required</div>\n            </div>\n\n            <button type=\"submit\">Login</button>   \n            <input type=\"checkbox\" checked=\"checked\"> Remember me   \n            <button type=\"button\" class=\"cancelbtn\" (click)=\"cancel()\"> Cancel</button>  \n            </form>\n        </div> \n      </div>  \n "
        },
        {
            "name": "ResultPageComponent",
            "id": "component-ResultPageComponent-64f12f472f8b31d7f6fce6d225ed9b3b",
            "file": "src/app/components/result-page/result-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-result-page",
            "styleUrls": [
                "./result-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./result-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "books$",
                    "type": "Observable<Book[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "enableEditDelete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "error$",
                    "type": "Observable<String>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "userInfo",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addNew",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "book",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "book",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "refreshBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, HostListener, Output, EventEmitter, Input } from '@angular/core';\nimport { Location } from \"@angular/common\";\nimport { Router } from '@angular/router';\nimport { DatashareService } from 'src/app/services/datashare.service';\nimport { BookService } from 'src/app/services/book.service';\nimport { Book } from 'src/app/interfaces/book';\nimport { User } from 'src/app/interfaces/user';\nimport { Store, select } from '@ngrx/store';\nimport * as fromBook from \"../state/book.reducer\";\nimport * as bookActions from \"../state/book.actions\";\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-result-page',\n  templateUrl: './result-page.component.html',\n  styleUrls: ['./result-page.component.scss']\n})\nexport class ResultPageComponent implements OnInit {\n\n  enableEditDelete: boolean;\n  books$: Observable<Book[]>;\n  error$: Observable<String>;\n  userInfo: User;\n\n  constructor(\n    private router: Router,\n    private datashareService: DatashareService,\n    private store: Store<fromBook.AppState>\n  ) { }\n\n  ngOnInit(): void {\n\n    this.userInfo = this.datashareService.userInfo;\n    if (this.userInfo && this.userInfo.username === 'admin')\n      this.enableEditDelete = true;\n    this.refreshBooks();\n  }\n\n\n  refreshBooks() {\n    this.store.dispatch(new bookActions.LoadBooks());\n    this.books$ = this.store.pipe(select(fromBook.getBooks));\n    this.error$ = this.store.pipe(select(fromBook.getError));\n  }\n\n  public logOut() {\n    this.datashareService.userInfo = this.userInfo;\n    this.router.navigate(['../']);\n  }\n\n  addNew() {\n    this.router.navigate(['../action']);\n  }\n\n  edit(book) {\n    this.datashareService.unsubscribe();\n    this.datashareService.setData(book);\n    this.router.navigate(['../action']);\n  }\n\n  delete(book) {\n    if (confirm('Are You Sure You want to Delete the Book : ' + book.title + '?')) {\n      this.store.dispatch(new bookActions.DeleteBook(book.id));\n    }\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n // padding: 12px;\r\n  border-radius: 2px;\r\n  background-color: var(--primary-color);\r\n  color: var(--text-color);\r\n}\r\n\r\n.page-header {\r\n    padding: 10px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .buttons {\r\n        button {\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 14px;\r\n        margin: 4px 2px;\r\n        cursor: pointer; \r\n        border-radius: 7px;\r\n        padding: 10px;\r\n        }\r\n\r\n        .add-new {\r\n            border: none;\r\n            background-color: tomato;          \r\n            color: white;            \r\n       }\r\n\r\n    .back {\r\n        background-color: #ffff;\r\n        border: 1px solid tomato;\r\n        color: tomato;\r\n    }\r\n    }\r\n}\r\n\r\n.container {\r\ntable {\r\n   // border-collapse: collapse;\r\n    border-spacing: 0;\r\n    width: 100%;\r\n    border: 1px solid #ddd;\r\n  }\r\n  \r\n  th, td {\r\n    text-align: left;\r\n    padding: 16px;\r\n  }\r\n  \r\n  tr:nth-child(even) {\r\n    background-color: #d1d1d1;\r\n  }\r\n\r\n  .action {\r\n    border: none;\r\n    border-radius: 25px;\r\n    background-color: antiquewhite;\r\n  }\r\n\r\n  \r\n}\r\n\r\n@media screen and (min-width: 280px) and (max-width: 768px) {\r\n  table, thead, tbody, th, td, tr {\r\n    display: block;\r\n  }\r\n  thead tr {\r\n    position: absolute;\r\n    top: -9999px;\r\n    left: -9999px;\r\n  }\r\n  tr { border: 1px solid #ccc; }\r\n  td {\r\n    border: none;\r\n    border-bottom: 1px solid #eee;\r\n    position: relative;\r\n    padding-left: 200px;\r\n    margin-left: 150px;\r\n  }\r\n  td:before {\r\n    position: absolute;\r\n    top: 12px;\r\n    left: 6px;\r\n    width: 200px;\r\n    padding-right: 40px;\r\n    white-space: nowrap;\r\n    margin-left: -150px;\r\n  }\r\n  td:nth-of-type(1):before { content: \"Id\"; }\r\n  td:nth-of-type(2):before { content: \"Name\"; }\r\n  td:nth-of-type(3):before { content: \"Category\"; }\r\n  td:nth-of-type(4):before { content: \"Description\";}\r\n  td:nth-of-type(5):before { content: \"Edit\";}\r\n  td:nth-of-type(6):before { content: \"Delete\";}\r\n}\r\n",
                    "styleUrl": "./result-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromBook.AppState>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromBook.AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-header\">\n<h3>Book Details</h3>\n<div class=\"buttons\">\n<button class=\"add-new\" (click)=\"addNew()\">Add New</button>\n<button class=\"back btn btn-secondary btn-sm float-sm-right mr-2\" (click)=\"logOut()\">\n LogOut </button>\n</div>\n</div>\n<div class=\"container\">\n <table>\n  <tr>\n    <th>Id</th>\n    <th>Name</th>\n    <th>Category</th>\n    <th>Description</th>\n  </tr>\n  <tr *ngFor=\"let list of ( books$ | async )\">\n    <td><div (click)=\"edit(list)\">{{list.id}}</div></td>\n    <td>{{list.title}}</td>\n    <td>{{list.category}}</td>\n    <td>{{list.description}}</td>\n    <td *ngIf=\"enableEditDelete\">\n       <button class=\"action\" (click)=\"edit(list)\"><img src=\"../../../assets/register.svg\"/></button>\n    </td>\n    <td *ngIf=\"enableEditDelete\">\n       <button class=\"action\" (click)=\"delete(list)\"><img src=\"../../../assets/trash.svg\"/></button>\n    </td>\n  </tr>\n </table>\n</div>\n\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-ac80a969c270078ce1a42fb84394d7c1",
            "file": "src/app/components/entry/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isRegisterd",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "signupForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "formdata",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "formdata",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { User } from 'src/app/interfaces/user';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit {\n\n  signupForm: FormGroup;\n  isRegisterd: boolean;\n\n  constructor(\n    private userService: UserService,\n    private fb: FormBuilder,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.signupForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      firstname: ['', [Validators.required]],\n      lastname: ['', [ ]],\n      email: ['', [Validators.required]]\n  });\n  }\n\n  get formControl() { \n    return this.signupForm.controls; \n  }\n\n  register(formdata: any) {\n\n    this.isRegisterd = true;\n    if (this.signupForm.invalid) {\n      return;\n    }\n\n    this.userService.addUser(formdata.value)\n    .subscribe((res: User[]) => {\n      if (res) {\n        this.router.navigate(['./entry/login']);\n      }\n    })\n  }\n\n  cancel() {\n  // this.location.back();\n  this.router.navigate(['../']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n      background-color: var(--primary-color);\r\n      color: var(--text-color);\r\n    }   \r\n\r\n      .container {\r\n        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n        transition: 0.3s;\r\n        width: 100%;\r\n        padding: 20px;\r\n        background-color: lightblue;\r\n\r\n        .error {\r\n            color: red;\r\n            font-size: 15px;\r\n        }\r\n      }\r\n      \r\n      input[type=text], input[type=password], textarea {\r\n        width: 100%;   \r\n        margin: 8px 0;  \r\n        padding: 12px 20px;   \r\n        display: inline-block;   \r\n        border: 2px solid blue;   \r\n        box-sizing: border-box;\r\n      }\r\n      hr {\r\n        border: 1px solid #f1f1f1;\r\n        margin-bottom: 25px;\r\n      }\r\n\r\n      .buttons {\r\n          display: flex;\r\n\r\n          button {\r\n            padding: 16px 20px;\r\n            margin: 8px 0; \r\n            width: 100%;\r\n            opacity: 0.9;\r\n            cursor: pointer; \r\n            font-size: 18px;\r\n          }\r\n\r\n          .button:hover {\r\n            opacity: 1;\r\n          }\r\n\r\n          .registerbtn {\r\n            background-color: tomato;\r\n            color: #ffff;\r\n            border: none; \r\n            margin: 8px;          \r\n          }\r\n\r\n          .cancelbtn {\r\n            background-color: #ffff;\r\n            color: tomato;\r\n            border: 2px solid tomato;\r\n            margin: 8px;\r\n          }\r\n      }\r\n",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControl": {
                    "name": "formControl",
                    "getSignature": {
                        "name": "formControl",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                }
            },
            "templateData": "   <div class=\"card\">\n    <div class=\"container\">  \n    <b><h3> User Registration Form </h3></b>\n    <hr>  \n\n <form [formGroup]=\"signupForm\" (ngSubmit)=\"register(signupForm.value)\">\n  <label> Username </label>   \n  <input type=\"text\" name=\"username\" placeholder= \"Username\" size=\"15\" required formControlName=\"username\" />  \n  <div *ngIf=\"isRegisterd && formControl.username.errors\">\n    <div class=\"error\" *ngIf=\"formControl.username.errors.required\">Username is required</div>\n  </div>\n\n  <label> Firstname: </label>    \n  <input type=\"text\" name=\"firstname\" placeholder=\"Firstname\" size=\"15\"required formControlName=\"firstname\" /> \n  <div *ngIf=\"isRegisterd && formControl.firstname.errors\">\n    <div  class=\"error\" *ngIf=\"formControl.firstname.errors.required\">Firstname is required</div>\n  </div>\n\n  <label> Lastname: </label>    \n  <input type=\"text\" name=\"lastname\" placeholder=\"Lastname\" size=\"15\" formControlName=\"lastname\" />   \n    \n  <label for=\"email\"><b>Email</b></label>  \n  <input type=\"text\" placeholder=\"Enter Email\" name=\"email\" required formControlName=\"email\">\n  <div *ngIf=\"isRegisterd && formControl.email.errors\">\n    <div  class=\"error\" *ngIf=\"formControl.email.errors.required\">Username is required</div>\n  </div>  \n    \n  <label for=\"psw\"><b>Password</b></label>  \n  <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" required formControlName=\"password\"> \n  <div *ngIf=\"isRegisterd && formControl.password.errors\">\n    <div  class=\"error\" *ngIf=\"formControl.password.errors.required\">Username is required</div>\n  </div> \n\n  <div class=\"buttons\">\n  <button type=\"submit\" class=\"registerbtn\">Register</button>\n  <button class=\"registerbtn\" class=\"cancelbtn\" (click)=\"cancel()\">Cancel</button>\n  </div>  \n  </form> \n  </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "ResultPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EntryModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "EntryRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EntryRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "bookAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "EntityAdapter<Book>",
                "defaultValue": "createEntityAdapter<Book>()"
            },
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
            },
            {
                "name": "defaultBook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "BookState",
                "defaultValue": "{\r\n    ids: [],\r\n    entities: {},\r\n    selectedBookId: null,\r\n    loading: false,\r\n    loaded: false,\r\n    error: \"\"\r\n  }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndpoint: \"http://localhost:3000\",\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndpoint: \"http://localhost:3000\",\n  production: false\n}"
            },
            {
                "name": "getBookFeatureState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<BookState>(\r\n    \"books\"\r\n  )"
            },
            {
                "name": "getBooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    bookAdapter.getSelectors().selectAll\r\n  )"
            },
            {
                "name": "getBooksLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loaded\r\n  )"
            },
            {
                "name": "getBooksLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loading\r\n  )"
            },
            {
                "name": "getCurrentBook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    getCurrentBookId,\r\n    state => state.entities[state.selectedBookId]\r\n  )"
            },
            {
                "name": "getCurrentBookId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.selectedBookId\r\n  )"
            },
            {
                "name": "getError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.error\r\n  )"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/state/book.reducer.ts",
                "type": "",
                "defaultValue": "bookAdapter.getInitialState(defaultBook)"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/utils.ts",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\r\n  router: routerReducer\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "bookReducer",
                "file": "src/app/components/state/book.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "BookState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BookAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadBooks | LoadBooksSuccess | LoadBooksFail | CreateBook | CreateBookSuccess | CreateBookFail | UpdateBook | UpdateBookSuccess | UpdateBookFail | DeleteBook | DeleteBookSuccess | DeleteBookFail",
                "file": "src/app/components/state/book.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "BookActionTypes",
                "childs": [
                    {
                        "name": "LOAD_BOOKS",
                        "value": "[Book] Load Books"
                    },
                    {
                        "name": "LOAD_BOOKS_SUCCESS",
                        "value": "[Book] Load Books Success"
                    },
                    {
                        "name": "LOAD_BOOKS_FAIL",
                        "value": "[Book] Load Books Fail"
                    },
                    {
                        "name": "CREATE_BOOK",
                        "value": "[Book] Create Book"
                    },
                    {
                        "name": "CREATE_BOOK_SUCCESS",
                        "value": "[Book] Create Book Success"
                    },
                    {
                        "name": "CREATE_BOOK_FAIL",
                        "value": "[Book] Create Book Fail"
                    },
                    {
                        "name": "UPDATE_BOOK",
                        "value": "[Book] Update Book"
                    },
                    {
                        "name": "UPDATE_BOOK_SUCCESS",
                        "value": "[Book] Update Book Success"
                    },
                    {
                        "name": "UPDATE_BOOK_FAIL",
                        "value": "[Book] Update Book Fail"
                    },
                    {
                        "name": "DELETE_BOOK",
                        "value": "[Book] Delete Book"
                    },
                    {
                        "name": "DELETE_BOOK_SUCCESS",
                        "value": "[Book] Delete Book Success"
                    },
                    {
                        "name": "DELETE_BOOK_FAIL",
                        "value": "[Book] Delete Book Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/components/state/book.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/state/book.reducer.ts": [
                {
                    "name": "bookAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "EntityAdapter<Book>",
                    "defaultValue": "createEntityAdapter<Book>()"
                },
                {
                    "name": "defaultBook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "BookState",
                    "defaultValue": "{\r\n    ids: [],\r\n    entities: {},\r\n    selectedBookId: null,\r\n    loading: false,\r\n    loaded: false,\r\n    error: \"\"\r\n  }"
                },
                {
                    "name": "getBookFeatureState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<BookState>(\r\n    \"books\"\r\n  )"
                },
                {
                    "name": "getBooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    bookAdapter.getSelectors().selectAll\r\n  )"
                },
                {
                    "name": "getBooksLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loaded\r\n  )"
                },
                {
                    "name": "getBooksLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.loading\r\n  )"
                },
                {
                    "name": "getCurrentBook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    getCurrentBookId,\r\n    state => state.entities[state.selectedBookId]\r\n  )"
                },
                {
                    "name": "getCurrentBookId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.selectedBookId\r\n  )"
                },
                {
                    "name": "getError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getBookFeatureState,\r\n    (state: BookState) => state.error\r\n  )"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/state/book.reducer.ts",
                    "type": "",
                    "defaultValue": "bookAdapter.getInitialState(defaultBook)"
                }
            ],
            "src/app/services/theme.service.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
                },
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndpoint: \"http://localhost:3000\",\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndpoint: \"http://localhost:3000\",\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/app/state/utils.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/utils.ts",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\r\n  router: routerReducer\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/components/state/book.reducer.ts": [
                {
                    "name": "bookReducer",
                    "file": "src/app/components/state/book.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "BookState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/components/state/book.actions.ts": [
                {
                    "name": "BookActionTypes",
                    "childs": [
                        {
                            "name": "LOAD_BOOKS",
                            "value": "[Book] Load Books"
                        },
                        {
                            "name": "LOAD_BOOKS_SUCCESS",
                            "value": "[Book] Load Books Success"
                        },
                        {
                            "name": "LOAD_BOOKS_FAIL",
                            "value": "[Book] Load Books Fail"
                        },
                        {
                            "name": "CREATE_BOOK",
                            "value": "[Book] Create Book"
                        },
                        {
                            "name": "CREATE_BOOK_SUCCESS",
                            "value": "[Book] Create Book Success"
                        },
                        {
                            "name": "CREATE_BOOK_FAIL",
                            "value": "[Book] Create Book Fail"
                        },
                        {
                            "name": "UPDATE_BOOK",
                            "value": "[Book] Update Book"
                        },
                        {
                            "name": "UPDATE_BOOK_SUCCESS",
                            "value": "[Book] Update Book Success"
                        },
                        {
                            "name": "UPDATE_BOOK_FAIL",
                            "value": "[Book] Update Book Fail"
                        },
                        {
                            "name": "DELETE_BOOK",
                            "value": "[Book] Delete Book"
                        },
                        {
                            "name": "DELETE_BOOK_SUCCESS",
                            "value": "[Book] Delete Book Success"
                        },
                        {
                            "name": "DELETE_BOOK_FAIL",
                            "value": "[Book] Delete Book Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/components/state/book.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/components/state/book.actions.ts": [
                {
                    "name": "BookAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadBooks | LoadBooksSuccess | LoadBooksFail | CreateBook | CreateBookSuccess | CreateBookFail | UpdateBook | UpdateBookSuccess | UpdateBookFail | DeleteBook | DeleteBookSuccess | DeleteBookFail",
                    "file": "src/app/components/state/book.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent",
                        "canActivate": []
                    },
                    {
                        "path": "result",
                        "component": "ResultPageComponent"
                    },
                    {
                        "path": "action",
                        "component": "ActionComponent"
                    },
                    {
                        "path": "entry",
                        "loadChildren": "./components/entry/entry.module#EntryModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/entry/entry-routing.module.ts",
                                        "module": "EntryRoutingModule",
                                        "children": [
                                            {
                                                "path": "login",
                                                "component": "LoginComponent"
                                            },
                                            {
                                                "path": "sign-up",
                                                "component": "SignUpComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "EntryModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/action/action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/entry/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/entry/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/result-page/result-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateBook",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateBookFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteBook",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteBookFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadBooks",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadBooksFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadBooksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateBook",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateBookFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateBookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BookEffect",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BookState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "bookReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultBook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBookFeatureState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBooksLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getBooksLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCurrentBook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCurrentBookId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/state/book.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/book.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/book.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BookService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/datashare.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DatashareService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/app-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/state/utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}